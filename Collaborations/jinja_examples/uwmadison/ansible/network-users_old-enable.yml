---
- name: IOS Local Users
  # NB: for testing just limit to one host
  hosts: s-*:r-*:t-*
  gather_facts: false
  # Ansible collection ansible.netcommon
  connection: ansible.netcommon.network_cli
  # Ansible 2.9 built-in
  # connection: network_cli
  become: yes
  become_method: enable
  serial:
    - 50
    - 100
    # - 500
  max_fail_percentage: 20
  vars:
    ansible_python_interpreter: /usr/bin/python3
    ansible_network_import_modules: true
    ansible_host_key_auto_add: true
    ansible_host_key_checking: false
    # ansible_private_key_file: "/home/net/.ssh/id_rsa.pub"
    # ansible_net_ssh_keyfile: "/home/net/.ssh/id_rsa.pub"
    # Ansible collection ansible.netcommon and cisco.ios
    ansible_network_os: "cisco.ios.ios"
    # ansible_network_cli_ssh_type: libssh
    ansible_network_cli_ssh_type: paramiko
    # Ansible 2.9 built-in
    # ansible_network_os: "ios"
    ansible_command_timeout: 300
    ansible_connect_timeout: 300
    net_user: "{{ lookup('pipe', '/usr/local/ns/bin/devinfo -j ' + inventory_hostname) | from_json }}"
    # net_user: "{{ lookup('pipe', '/usr/local/ns/bin/devinfo -j emergency-' + inventory_hostname) | from_json }}"
    ansible_user: "{{ net_user.username }}"
    ansible_password: "{{ net_user.password }}"
    ansible_become_password: "{{ old_enable_secret.password }}" ### set the ansible become password for privilege elevation 
    emergency_user: "{{ lookup('pipe', '/usr/local/ns/bin/devinfo -j emergency') | from_json }}" #always current emergency
    enable_secret: "{{ lookup('pipe', '/usr/local/ns/bin/devinfo -j enable') | from_json }}" #always current enable
    # line you want to edit based on what enable is on the device below
    old_enable_secret: "{{ lookup('pipe', '/usr/local/ns/bin/devinfo -j enable-23') | from_json }}"
    # line you want to edit based on what enable is on the device above
    radius_secret: "{{ lookup('pipe', '/usr/local/ns/bin/devinfo -j radius') | from_json }}"
    netbox_devinfo: "{{ lookup('pipe','/usr/local/ns/bin/devinfo -j netbox-prod') | from_json }}"
    netbox_api: "{{ netbox_devinfo.connection_method }}://{{ netbox_devinfo.attributes.host }}:{{ netbox_devinfo.attributes.port }}/"
    netbox_token: "{{ netbox_devinfo.password }}"
    platform_family: "{{ platforms[0].split('-')[0] }}"
    device_family: "{{ device_types[0] | regex_search('^(ap\\d\\d\\d|ws-c\\d+|c9\\d+)', '\\1') | first }}"
    # netdevice_inventory: "{{ query('netbox.netbox.nb_lookup', 'devices', api_filter='status=active has_primary_ip=True', api_endpoint=netbox_api, token=netbox_token) }}"
    # netbox_vlans: "{{ query('netbox.netbox.nb_lookup', 'vlans', api_endpoint=netbox_api, token=netbox_token) | items2dict(key_name='key', value_name='value') }}"
    # ansible_net_config: "{{ lookup('pipe', '/usr/bin/co -q -p /home/net/cms/' + inventory_hostname + '.conf') }}"
    # ansible_net_config: "{{ lookup('file', '/home/net/cms/' + inventory_hostname + '.conf') }}"
  tasks:
    - name: Get Facts
      cisco.ios.ios_facts:
        gather_subset: "min,config"
 

    - name: Enable Secret IOS 15.x
      when: "ansible_net_version is version('15','ge') or ansible_net_version is version('4', 'lt')"
      cisco.ios.ios_config:
        running_config: "{{ ansible_net_config }}"
        before:
          - "no enable password"
          - "no enable secret"
        lines:
          - "enable secret 8 {{ enable_secret.enable_password }}"
        save_when: never
      register: enable_output_iosxe
      notify: "copy running-config startup-config"
      failed_when: "'ERROR:' in enable_output_iosxe"
    - name: Enable Secret IOS 12.x
      when: "ansible_net_version is version('15','lt') and ansible_net_version is version('4', 'gt')"
      cisco.ios.ios_config:
        running_config: "{{ ansible_net_config }}"
        before:
          - "no enable password"
          - "no enable secret"
        lines:
          - "enable secret 5 {{ enable_secret.attributes.type5hash }}"
        save_when: never
      register: enable_output_ios
      notify: "copy running-config startup-config"
      failed_when: "'ERROR:' in enable_output_ios"

      # NB: using ios_config to respond to
      # "This operation will remove all username related configurations with same name.Do you want to continue? [confirm]"
      # interactive prompt in configure mode using when clause to only operate on configs where the
      # emerg user has a reversable type7 password
    - name: Local User Account (emerg with type8 secret) IOS 15.x
      when: "ansible_net_version is version('15','ge') or ansible_net_version is version('4', 'lt')"
      cisco.ios.ios_config:
        running_config: "{{ ansible_net_config }}"
        before: "no username emerg password\r\r"
        lines: "username emerg privilege 15 secret 8 {{ emergency_user.enable_password }}"
        save_when: never
      register: emerg_output_iosxe
      notify: "copy running-config startup-config"
      failed_when: "'ERROR:' in emerg_output_iosxe"

    - name: Local User Account (emerg with type5 secret) IOS 12.x
      when: "ansible_net_version is version('15','lt') and ansible_net_version is version('4', 'gt')"
      cisco.ios.ios_config:
        running_config: "{{ ansible_net_config }}"
        before: "no username emerg password\r\r"
        lines: "username emerg privilege 15 secret 5 {{ emergency_user.attributes.type5hash }}"
        save_when: never
      register: emerg_output_ios
      notify: "copy running-config startup-config"
      failed_when: "'ERROR:' in emerg_output_ios"

    - name: init cms checking and add E911

      expect:
        timeout: 90
        creates: "/home/net/cms/{{ inventory_hostname }}.conf,v"
        command: "/home/net/cms/bin/conf-new.sh"
        responses: 
          sysName: "{{inventory_hostname }}"
          
      



  handlers:
    - name: copy running-config startup-config
      cisco.ios.ios_command:
        commands:
          - "write memory"
        wait_for: "result[0] contains '[OK]'"
      ignore_errors: "{{ ansible_check_mode }}"
    - name: NetCMS Check-in
      listen: "copy running-config startup-config"
      command:
        # chdir: "/home/net/cms/"
        argv:
          - "/usr/bin/make"
          - "-f"
          - "/home/net/cms/Makefile"
          - "logmsg=ansible configuration {{ ansible_play_name }} by {{ lookup('env', 'LOGNAME') }}"
          - "/home/net/cms/{{ inventory_hostname }}.update"
      delegate_to: localhost

