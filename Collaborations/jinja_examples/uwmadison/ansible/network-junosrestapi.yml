---
- name: JunOS REST API Enable
  hosts: rj-*
  gather_facts: false
  # Ansible collection ansible.netcommon (latest) connection modules
  # connection: ansible.netcommon.network_cli
  # connection: ansible.netcommon.netconf
  # Ansible 2.9 built-in connection modules
  # NB: only junos_command supports network_cli, junos_config and others require netconf
  # connection: network_cli
  connection: netconf
  # FIXME: Is this necessary, not sure JunOS has an "enable" concept
  # become: true
  # become_method: enable
  vars:
    ansible_python_interpreter: /usr/bin/python3
    ansible_network_import_modules: true
    ansible_host_key_auto_add: true
    # Ansible collection junipernetworks.junos (latest) config modules
    # ansible_network_os: junipernetworks.junos.junos
    # Ansible 2.9 built-in junos config modules
    ansible_network_os: "junos"

    ansible_command_timeout: 300
    ansible_connect_timeout: 300
    # Auto-login using credentials from devinfo
    net_user: "{{ lookup('pipe', '/usr/local/ns/bin/devinfo -j ' + inventory_hostname) | from_json }}"
    ansible_user: "{{ net_user.username }}"
    ansible_password: "{{ net_user.password }}"
    ansible_become_password: "{{ net_user.enable_password }}"
    # Copy-pasta from other playbooks
    # platform_family: "{{ platforms[0].split('-')[0] if platforms is defined else 'UNKN' }}"
    # device_family: "{{ device_types[0] | regex_search('^(ap\\d\\d\\d|ws-c\\d+|c9\\d+|n\\dk|n\\d\\d|securesync|sdx|pa|m-\\d+|cordex-cxc|aruba|ap-\\d|poweredge|avocent|equallogic|asr-\\d+|mx\\d+|ex\\d+|srx\\d+|VM)', '\\1') | first if device_types is defined else 'VM' }}"
    # device_type: "{{inventory_hostname.split('-')[0]}}"
    # device_ha: "{{ inventory_hostname.split('-')[5]}}"
  tasks:
    - name: enable netconf
      connection: network_cli
      junos_netconf:
        # state: present
        # listen_on: 830
      notify: commit config
    - name: check if https cert is created
      connection: network_cli
      junos_command:
        commands: "show security pki local-certificate"
        # NB: wait_for only supports netconf and doesn't seem to work with this show command
        #     so we register the output and check it in a when clause in the next task
        # wait_for: "result[0] contains junos_rest_https_cert"
      register: show_cert
    - name: create https self-signed cert manually
      # `when` clauses are an `if` statement and basically eval() a python/jinja2 expression
      when: "show_cert.stdout[0].find(junos_rest_https_cert) == -1"
      # FIXME: running command over netconf to use wait_for to check output hasn't been tested,
      #    comment out the connection override and failed_when and uncomment wait_for to test.
      #
      #    I prefer to have automation fail if the state is not known and verified and punt
      #    to an operator than proceed in an untested state, potentially causing errors
      connection: network_cli
      junos_command:
        commands:
          - "request security pki generate-key-pair type ecdsa size 384 certificate-id {{ junos_rest_https_cert }}"
          - 'request security pki local-certificate generate-self-signed certificate-id {{ junos_rest_https_cert }} subject CN={{ inventory_hostname }}.local.net.wisc.edu,OU=net,O=wisc,O=edu email "{{ default_mail_alias }}" domain-name local.net.wisc.edu ip-address {{ primary_ip4 }}'
        # wait_for:
        #   - "result[0] contains 'Generated key pair'"
        #   - "result[1] contains 'Self-signed certificate generated and loaded successfully'"
      register: create_cert
      # failed_when also evaluates and expression and provides custom failure detection
      failed_when: "create_cert.stdout[0].find('Generated key pair') == -1 or create_cert.stdout[1].find('Self-signed certificate generated and loaded successfully') == -1"
    - name: Enable system service rest
      junos_config:
        src: "network/base/junos_system_service_rest.j2"
        update: replace
        # FIXME: verify what commit_check/confirm_commit actually do and what is the desired behavior
        # check_commit: true
        # confirm: minutes
        confirm: 5
        # comment: "ansible configuration {{ ansible_play_name }} by {{ lookup('env', 'LOGNAME') }}"
      # `notify` raises a flag for a handler to catch, handlers only run once
      #  at the end no matter how many times they are flagged.  can be a list
      #  of handlers to notify
      # notify: commit config
      notify: commit config
    - name: Add REST API ports to remote access firewall rules
      junos_config:
        src: "network/base/junos_sync_fw-inet-remote-access.j2"
        update: replace
        # check_commit: true
        # confirm: minutes
        confirm: 5
      notify: commit config
  handlers:
    - name: commit config
      junos_config:
        # FIXME: verify what commit_check/confirm_commit actually do and what is the desired behavior
        confirm_commit: true
        comment: "ansible configuration {{ ansible_play_name }} by {{ lookup('env', 'LOGNAME') }}"
      ignore_errors: "{{ ansible_check_mode }}"
      notify: NetCMS Check-in
    - name: NetCMS Check-in
      # you can have a list of `notify` flags, or have multipler handlers listen
      # for the same flag, or have handlers notify other handlers to chain them,
      # when handlers need to have more than one step.  I suppose a handler could
      # also import a playbook or use the `block` module to have multiple tasks.
      # listen: "commit config"
      command:
        argv:
          - "/usr/bin/make"
          - "-f"
          - "/home/net/cms/Makefile"
          - "logmsg=ansible configuration {{ ansible_play_name }} by {{ lookup('env', 'LOGNAME') }}"
          - "/home/net/cms/{{ inventory_hostname }}.update"
      # task modules are ususally run against the target host `inventory_hostname`
      # but can be delegated to other hosts, eg enabling a service on one host may
      # need to push a command to the load balancer on another host, or in this
      # case we run a command on the ansible control node (ie where we are running
      # the playbook from).
      delegate_to: localhost
      register: netcms_make_update
      # we use failed_when here because I check the output text and not just for a non-zero exit code
      failed_when: "'WARN' in netcms_make_update.stdout"
