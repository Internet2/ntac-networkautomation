---
- name: JunOS Sync Config Groups
  hosts: rj-cssclabqa-*
  gather_facts: false
  # Ansible collection ansible.netcommon (latest) connection modules
  # connection: ansible.netcommon.network_cli
  connection: ansible.netcommon.netconf
  vars:
    ansible_python_interpreter: /usr/bin/python3
    ansible_network_import_modules: true
    ansible_host_key_auto_add: true
    # Ansible collection junipernetworks.junos (latest) config modules
    ansible_network_os: junipernetworks.junos.junos
    ansible_command_timeout: 300
    ansible_connect_timeout: 300
    # Auto-login using credentials from devinfo
    net_user: "{{ lookup('pipe', '/usr/local/ns/bin/devinfo -j ' + inventory_hostname) | from_json }}"
    ansible_user: "{{ net_user.username }}"
    ansible_password: "{{ net_user.password }}"
    ansible_become_password: "{{ net_user.enable_password }}"
    # Copy-pasta from other playbooks
    # platform_family: "{{ platforms[0].split('-')[0] if platforms is defined else 'UNKN' }}"
    # device_family: "{{ device_types[0] | regex_search('^(ap\\d\\d\\d|ws-c\\d+|c9\\d+|n\\dk|n\\d\\d|securesync|sdx|pa|m-\\d+|cordex-cxc|aruba|ap-\\d|poweredge|avocent|equallogic|asr-\\d+|mx\\d+|ex\\d+|srx\\d+|VM)', '\\1') | first if device_types is defined else 'VM' }}"
    # device_type: "{{inventory_hostname.split('-')[0]}}"
    # device_ha: "{{ inventory_hostname.split('-')[5]}}"
    __doc__: |
      EXPERIMENTAL JunOS Configuration

      Demonstration of method to sync config from `/usr/local/uwsysnet-iptrack/etc/configdata/juniper/juniper-groups`
      using Ansible instead of jlogin

      NB: only junos_command supports network_cli, junos_config and others require netconf
      which is presumed to already be configured

      FIXME: move variables from play-local to `hosts.yml` inventory file
  tasks:
    # - name: enable netconf
    #   connection: network_cli
    #   junos_netconf:
    #     # state: present
    #     # listen_on: 830
    #   notify: commit config
    - name: Sync Config groups from uwsysnet-iptrack
      vars:
        __doc__: |
          `notify: commit config` raises a flag for a handler to catch, handlers only run once
           at the end if they are flagged no matter how many times they are flagged.

           `notify` can be a string of the `name` of a handler or a list of handler
           names to notify, and handlers can `listen` for more than one notification
           name.
      junipernetworks.junos.junos_config:
        src: "network/base/junos_groups.j2"
        update: replace
        # confirm: minutes
        confirm: 5
      notify: commit config
  handlers:
    - name: commit config
      junipernetworks.junos.junos_config:
        confirm_commit: true
        comment: "ansible configuration {{ ansible_play_name }} by {{ lookup('env', 'LOGNAME') }}"
      ignore_errors: "{{ ansible_check_mode }}"
      notify: NetCMS Check-in
    - name: NetCMS Check-in
      vars:
        __doc__: |
          you can have a list of `notify` flags, or have multipler handlers listen
          for the same flag, or have handlers notify other handlers to chain them,
          when handlers need to have more than one step.  I suppose a handler could
          also import a playbook or use the `block` module to have multiple tasks.
          eg. `listen: "commit config"`

          task modules are ususally run against the target host `inventory_hostname`
          but can be delegated to other hosts, eg enabling a service on one host may
          need to push a command to the load balancer on another host, or in this
          case we run the CMS check-in command on the ansible control node (ie where
          we are running the playbook from).

          we use `failed_when` here to check the output text for `WARN` and not just for a non-zero exit code
      command:
        argv:
          - "/usr/bin/make"
          - "-f"
          - "/home/net/cms/Makefile"
          - "logmsg=ansible configuration {{ ansible_play_name }} by {{ lookup('env', 'LOGNAME') }}"
          - "/home/net/cms/{{ inventory_hostname }}.update"
      delegate_to: localhost
      register: netcms_make_update
      failed_when: "'WARN' in netcms_make_update.stdout"
