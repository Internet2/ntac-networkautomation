---
- name: JunOS Sync Prefix Lists
  hosts: rj-*
#  hosts: rj-cssclabqa-b217-1-core,rj-cssclabqa-b217-2-core
  serial: 1
  gather_facts: false
  # collections:
  #   - juniper.device
  # Ansible collection ansible.netcommon (latest) connection modules
  # connection: ansible.netcommon.network_cli
  connection: ansible.netcommon.netconf
  # FIXME: Is this necessary, not sure JunOS has an "enable" concept
  # become: true
  # become_method: enable
  vars:
    V4_MAX: 600
    V4_MIN: 150
    V6_MAX: 200
    V6_MIN: 50
    ansible_python_interpreter: /usr/bin/python3
    ansible_network_import_modules: true
    ansible_host_key_auto_add: true
    # Ansible collection junipernetworks.junos (latest) config modules
    ansible_network_os: junipernetworks.junos.junos
    # ansible_network_os: "junos"
    v4file: "/var/local/tftp/juniper/prefix-lists/iplist-v4"
    v6file: "/var/local/tftp/juniper/prefix-lists/iplist-v6"

    ansible_command_timeout: 300
    ansible_connect_timeout: 300
    # Auto-login using credentials from devinfo
    net_user: "{{ lookup('pipe', '/usr/local/ns/bin/devinfo -j ' + inventory_hostname) | from_json }}"
    ansible_user: "{{ net_user.username }}"
    ansible_password: "{{ net_user.password }}"
    ansible_become_password: "{{ net_user.enable_password }}"
  tasks:
    - name: Sleep for 300 seconds between devices
      ansible.builtin.wait_for:
        timeout: 300
      delegate_to: localhost
      when: inventory_hostname != ansible_play_hosts[0]

    - name: Show Current Device
      ansible.builtin.debug:
        msg: "==== Current host: {{ inventory_hostname }}" 

    - name: Show Current Device
      ansible.builtin.debug:
        msg: "host[0]: {{ ansible_play_hosts }}" 

    - name: Count IPv4 Addresses in List
      ansible.builtin.command: "/bin/grep -c '/32;' /var/local/tftp/juniper/prefix-lists/iplist-v4"
      register: V4_COUNT

    - name: Show v4 Count
      ansible.builtin.debug:
        msg: "V4 count: {{ V4_COUNT.stdout }}" 

    - name: Sanity Check IPv4 Addresses in List
      ansible.builtin.debug:
        msg: "V4 count: {{ V4_COUNT.stdout }} is within limits:  {{ V4_MIN }} .. {{ V4_MAX }}" 
      when: "( V4_MIN < (V4_COUNT.stdout | int) ) and ( (V4_COUNT.stdout | int) < V4_MAX )"

    - name: Count IPv6 Addresses in List
      ansible.builtin.command: "/bin/grep -c '/128;' /var/local/tftp/juniper/prefix-lists/iplist-v6"
      register: V6_COUNT

    - name: Show v6 Count
      ansible.builtin.debug:
        msg: "V6 count: {{ V6_COUNT.stdout }}" 

    - name: Sanity Check IPv6 Addresses in List
      ansible.builtin.debug:
        msg: "V6 count: {{ V6_COUNT.stdout }} is within limits: {{ V6_MIN }} .. {{ V6_MAX }}" 
      when: "( V6_MIN < (V6_COUNT.stdout|int) ) and ( (V6_COUNT.stdout|int) < V6_MAX )"

    - name: Sync Junos critical ips prefix list v4
      junos_config:
        src: "/var/local/tftp/juniper/prefix-lists/iplist-v4"
        src_format: text
        update: replace
        confirm: 5
      register: out
      # `notify` raises a flag for a handler to catch, handlers only run once
      #  at the end no matter how many times they are flagged.  can be a list
      #  of handlers to notify
      notify: commit check config
      when: "( V4_MIN < (V4_COUNT.stdout | int) ) and ( (V4_COUNT.stdout | int) < V4_MAX )"

#    - name: Show Output
#      ansible.builtin.debug:
#        var: out

    - name: Sync Junos critical ips prefix list v6
      junos_config:
        src: "/var/local/tftp/juniper/prefix-lists/iplist-v6"
        src_format: text
        update: replace
        confirm: 5
      register: out
      # `notify` raises a flag for a handler to catch, handlers only run once
      #  at the end no matter how many times they are flagged.  can be a list
      #  of handlers to notify
      notify: commit check config
      when: "( V6_MIN < (V6_COUNT.stdout|int) ) and ( (V6_COUNT.stdout|int) < V6_MAX )"

#    - name: Show Output
#      ansible.builtin.debug:
#        var: out

  handlers:
    - name: commit check config
      junos_config:
        check_commit: true
        comment: "ansible configuration {{ ansible_play_name }} by {{ lookup('env', 'LOGNAME') }}"
      ignore_errors: "{{ ansible_check_mode }}"
      notify: NetCMS Check-in
    - name: NetCMS Check-in
      # you can have a list of `notify` flags, or have multipler handlers listen
      # for the same flag, or have handlers notify other handlers to chain them,
      # when handlers need to have more than one step.  I suppose a handler could
      # also import a playbook or use the `block` module to have multiple tasks.
      # listen: "commit config"
      command:
        argv:
          - "/usr/bin/make"
          - "-f"
          - "/home/net/cms/Makefile"
          - "logmsg=ansible configuration {{ ansible_play_name }} by {{ lookup('env', 'LOGNAME') }}"
          - "/home/net/cms/{{ inventory_hostname }}.update"
      # task modules are ususally run against the target host `inventory_hostname`
      # but can be delegated to other hosts, eg enabling a service on one host may
      # need to push a command to the load balancer on another host, or in this
      # case we run a command on the ansible control node (ie where we are running
      # the playbook from).
      delegate_to: localhost
      register: netcms_make_update
      # we use failed_when here because I check the output text and not just for a non-zero exit code
      failed_when: "'WARN' in netcms_make_update.stdout"
